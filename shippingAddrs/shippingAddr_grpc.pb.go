// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: shippingAddrs.proto

package shippingAddrs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShippingAddr_GetShippingAddrList_FullMethodName = "/shippingAddrs.ShippingAddr/GetShippingAddrList"
	ShippingAddr_GetShippingAddr_FullMethodName     = "/shippingAddrs.ShippingAddr/GetShippingAddr"
	ShippingAddr_CreateShippingAddr_FullMethodName  = "/shippingAddrs.ShippingAddr/CreateShippingAddr"
	ShippingAddr_UpdateShippingAddr_FullMethodName  = "/shippingAddrs.ShippingAddr/UpdateShippingAddr"
	ShippingAddr_DeleteShippingAddr_FullMethodName  = "/shippingAddrs.ShippingAddr/DeleteShippingAddr"
)

// ShippingAddrClient is the client API for ShippingAddr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingAddrClient interface {
	GetShippingAddrList(ctx context.Context, in *GetShippingAddrListReq, opts ...grpc.CallOption) (*GetShippingAddrListResp, error)
	GetShippingAddr(ctx context.Context, in *GetShippingAddrReq, opts ...grpc.CallOption) (*GetShippingAddrResp, error)
	CreateShippingAddr(ctx context.Context, in *CreateShippingAddrReq, opts ...grpc.CallOption) (*CreateShippingAddrResp, error)
	UpdateShippingAddr(ctx context.Context, in *UpdateShippingAddrReq, opts ...grpc.CallOption) (*UpdateShippingAddrResp, error)
	DeleteShippingAddr(ctx context.Context, in *DeleteShippingAddrReq, opts ...grpc.CallOption) (*DeleteShippingAddrResp, error)
}

type shippingAddrClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingAddrClient(cc grpc.ClientConnInterface) ShippingAddrClient {
	return &shippingAddrClient{cc}
}

func (c *shippingAddrClient) GetShippingAddrList(ctx context.Context, in *GetShippingAddrListReq, opts ...grpc.CallOption) (*GetShippingAddrListResp, error) {
	out := new(GetShippingAddrListResp)
	err := c.cc.Invoke(ctx, ShippingAddr_GetShippingAddrList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingAddrClient) GetShippingAddr(ctx context.Context, in *GetShippingAddrReq, opts ...grpc.CallOption) (*GetShippingAddrResp, error) {
	out := new(GetShippingAddrResp)
	err := c.cc.Invoke(ctx, ShippingAddr_GetShippingAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingAddrClient) CreateShippingAddr(ctx context.Context, in *CreateShippingAddrReq, opts ...grpc.CallOption) (*CreateShippingAddrResp, error) {
	out := new(CreateShippingAddrResp)
	err := c.cc.Invoke(ctx, ShippingAddr_CreateShippingAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingAddrClient) UpdateShippingAddr(ctx context.Context, in *UpdateShippingAddrReq, opts ...grpc.CallOption) (*UpdateShippingAddrResp, error) {
	out := new(UpdateShippingAddrResp)
	err := c.cc.Invoke(ctx, ShippingAddr_UpdateShippingAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingAddrClient) DeleteShippingAddr(ctx context.Context, in *DeleteShippingAddrReq, opts ...grpc.CallOption) (*DeleteShippingAddrResp, error) {
	out := new(DeleteShippingAddrResp)
	err := c.cc.Invoke(ctx, ShippingAddr_DeleteShippingAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingAddrServer is the server API for ShippingAddr service.
// All implementations must embed UnimplementedShippingAddrServer
// for forward compatibility
type ShippingAddrServer interface {
	GetShippingAddrList(context.Context, *GetShippingAddrListReq) (*GetShippingAddrListResp, error)
	GetShippingAddr(context.Context, *GetShippingAddrReq) (*GetShippingAddrResp, error)
	CreateShippingAddr(context.Context, *CreateShippingAddrReq) (*CreateShippingAddrResp, error)
	UpdateShippingAddr(context.Context, *UpdateShippingAddrReq) (*UpdateShippingAddrResp, error)
	DeleteShippingAddr(context.Context, *DeleteShippingAddrReq) (*DeleteShippingAddrResp, error)
	mustEmbedUnimplementedShippingAddrServer()
}

// UnimplementedShippingAddrServer must be embedded to have forward compatible implementations.
type UnimplementedShippingAddrServer struct {
}

func (UnimplementedShippingAddrServer) GetShippingAddrList(context.Context, *GetShippingAddrListReq) (*GetShippingAddrListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingAddrList not implemented")
}
func (UnimplementedShippingAddrServer) GetShippingAddr(context.Context, *GetShippingAddrReq) (*GetShippingAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingAddr not implemented")
}
func (UnimplementedShippingAddrServer) CreateShippingAddr(context.Context, *CreateShippingAddrReq) (*CreateShippingAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShippingAddr not implemented")
}
func (UnimplementedShippingAddrServer) UpdateShippingAddr(context.Context, *UpdateShippingAddrReq) (*UpdateShippingAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingAddr not implemented")
}
func (UnimplementedShippingAddrServer) DeleteShippingAddr(context.Context, *DeleteShippingAddrReq) (*DeleteShippingAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShippingAddr not implemented")
}
func (UnimplementedShippingAddrServer) mustEmbedUnimplementedShippingAddrServer() {}

// UnsafeShippingAddrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingAddrServer will
// result in compilation errors.
type UnsafeShippingAddrServer interface {
	mustEmbedUnimplementedShippingAddrServer()
}

func RegisterShippingAddrServer(s grpc.ServiceRegistrar, srv ShippingAddrServer) {
	s.RegisterService(&ShippingAddr_ServiceDesc, srv)
}

func _ShippingAddr_GetShippingAddrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingAddrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddrServer).GetShippingAddrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddr_GetShippingAddrList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddrServer).GetShippingAddrList(ctx, req.(*GetShippingAddrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingAddr_GetShippingAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddrServer).GetShippingAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddr_GetShippingAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddrServer).GetShippingAddr(ctx, req.(*GetShippingAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingAddr_CreateShippingAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShippingAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddrServer).CreateShippingAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddr_CreateShippingAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddrServer).CreateShippingAddr(ctx, req.(*CreateShippingAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingAddr_UpdateShippingAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShippingAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddrServer).UpdateShippingAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddr_UpdateShippingAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddrServer).UpdateShippingAddr(ctx, req.(*UpdateShippingAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingAddr_DeleteShippingAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShippingAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddrServer).DeleteShippingAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingAddr_DeleteShippingAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddrServer).DeleteShippingAddr(ctx, req.(*DeleteShippingAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingAddr_ServiceDesc is the grpc.ServiceDesc for ShippingAddr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingAddr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shippingAddrs.ShippingAddr",
	HandlerType: (*ShippingAddrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShippingAddrList",
			Handler:    _ShippingAddr_GetShippingAddrList_Handler,
		},
		{
			MethodName: "GetShippingAddr",
			Handler:    _ShippingAddr_GetShippingAddr_Handler,
		},
		{
			MethodName: "CreateShippingAddr",
			Handler:    _ShippingAddr_CreateShippingAddr_Handler,
		},
		{
			MethodName: "UpdateShippingAddr",
			Handler:    _ShippingAddr_UpdateShippingAddr_Handler,
		},
		{
			MethodName: "DeleteShippingAddr",
			Handler:    _ShippingAddr_DeleteShippingAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shippingAddrs.proto",
}
